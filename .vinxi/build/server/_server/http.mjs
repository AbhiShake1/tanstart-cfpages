import{H3Event as c,getRequestURL as _,getResponseStatus as x,getCookie as m,setCookie as C,getRequestWebStream as S}from"h3";import{AsyncLocalStorage as R}from"node:async_hooks";var v="Invariant failed";function I(e,t){if(!e)throw new Error(v)}function T(e={}){let t,o=!1;const r=n=>{if(t&&t!==n)throw new Error("Context conflict")};let s;if(e.asyncContext){const n=e.AsyncLocalStorage||globalThis.AsyncLocalStorage;n?s=new n:console.warn("[unctx] `AsyncLocalStorage` is not provided.")}const f=()=>{if(s){const n=s.getStore();if(n!==void 0)return n}return t};return{use:()=>{const n=f();if(n===void 0)throw new Error("Context is not available");return n},tryUse:()=>f(),set:(n,a)=>{a||r(n),t=n,o=!0},unset:()=>{t=void 0,o=!1},call:(n,a)=>{r(n),t=n;try{return s?s.run(n,a):a()}finally{o||(t=void 0)}},async callAsync(n,a){t=n;const b=()=>{t=n},l=()=>t===n?b:void 0;y.add(l);try{const w=s?s.run(n,a):a();return o||(t=void 0),await w}finally{y.delete(l)}}}}function q(e={}){const t={};return{get(o,r={}){return t[o]||(t[o]=T({...e,...r})),t[o]}}}const u=typeof globalThis<"u"?globalThis:typeof self<"u"?self:typeof global<"u"?global:typeof window<"u"?window:{},d="__unctx__",E=u[d]||(u[d]=q()),A=(e,t={})=>E.get(e,t),g="__unctx_async_handlers__",y=u[g]||(u[g]=new Set);function L(e){let t;const o=h(e),r={duplex:"half",method:e.method,headers:e.headers};return e.node.req.body instanceof ArrayBuffer?new Request(o,{...r,body:e.node.req.body}):new Request(o,{...r,get body(){return t||(t=$(e),t)}})}function K(e){return e.web??={request:L(e),url:h(e)},e.web.request}function H(){return U()}const p=Symbol("$HTTPEvent");function W(e){return typeof e=="object"&&(e instanceof c||e?.[p]instanceof c||e?.__is_event__===!0)}function i(e){return function(...t){let o=t[0];if(W(o))t[0]=o instanceof c||o.__is_event__?o:o[p];else{if(!globalThis.app.config.server.experimental?.asyncContext)throw new Error("AsyncLocalStorage was not enabled. Use the `server.experimental.asyncContext: true` option in your app configuration to enable it. Or, pass the instance of HTTPEvent that you have as the first argument to the function.");if(o=H(),!o)throw new Error("No HTTPEvent found in AsyncLocalStorage. Make sure you are using the function within the server runtime.");t.unshift(o)}return e(...t)}}const h=i(_),B=i(x),F=i(m),M=i(C),$=i(S);function P(){return A("nitro-app",{asyncContext:!!globalThis.app.config.server.experimental?.asyncContext,AsyncLocalStorage:R})}function U(){return P().use().event}export{U as a,F as b,B as g,I as i,M as s,K as t};
